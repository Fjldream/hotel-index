import Vue from "vue";import  Vuex from 'vuex';//vuex的数据存储在浏览器内存中 使用vue-persist持久性存储 在本地备份一份 浏览器刷新重新读取import createPersistedstate from 'vuex-persistedstate';Vue.use(Vuex);//Vuex的核心是一个仓库//创建一个实例const store = new Vuex.Store({    //唯一的数据来源    state:{        indexSearch:{            province:'',            address:'',            startTime:'',            startDay:'',            endTime: '',            endDay:'',            stayDay:2        },    },    getters:{    },    mutations:{        setTime(state,payload){            var weeks = new Array("SUN", "MON", "TUR", "WED", "THU", "FRI", "SAT");            let{start,end,startDay,endDay,stayDay} = payload;            let data = new Date();            let startTime = start?start : data.getMonth()+2+'.'+data.getDate();            let endTime = end?end:data.getMonth()+'.'+data.getDate()+2;            startDay = startDay===undefined?data.getDay():startDay;            endDay = endDay===undefined?data.getDay()+2:endDay;            stayDay = startDay?stayDay:2;            state.indexSearch.startTime = startTime;            state.indexSearch.endTime = endTime;            state.indexSearch.startDay = weeks[startDay];            state.indexSearch.endDay = weeks[endDay];            state.indexSearch.stayDay = stayDay;        },        setProvince(state,payload){            state.indexSearch.province = payload;        }    },    actions:{    },    modules:{    },    plugins:[createPersistedstate()]})//是个模块 暴露出去export default store;//vuex 使用场景 同一个数据在不同页面有不同的操作//vuex 干什么的 状态管理.集中式的数据存储仓库//vuex 核心概念//state   ==>类似于组件里的data//getters  ==>computed//mutations ==>修改statu的唯一方法(同步)  执行 this.$store.commit('setTime',{start,end,startDay,endDay,stayDay}) 只能写同步操作//actions    ==>写一些异步方法,提交mutations//modules     ==>让仓库划分多一点模块//怎么使用//持久化存储//mapstate  映射state
import Vue from "vue";import  Vuex from 'vuex';//vuex的数据存储在浏览器内存中 使用vue-persist持久性存储 在本地备份一份 浏览器刷新重新读取import createPersistedstate from 'vuex-persistedstate';import {apiLogin, apiPerson, apiSetCollection} from "../http/api";import {SUCCESS} from "../lib/base";import router from "../router";import {Toast} from "vant";import 'vant/lib/toast/style';Vue.use(Vuex);//Vuex的核心是一个仓库//创建一个实例const store = new Vuex.Store({    //唯一的数据来源    state:{        indexSearch:{            province:'',            address:'',            startTime:'',            startDay:'',            endTime: '',            endDay:'',            stayDay:2        },        conllection:[],        token:''    },    getters:{        isConllection:(state)=>(hid)=>{            return state.conllection.some(ele=>ele == hid)        }    },    mutations:{        setTime(state,payload){            var weeks = new Array("SUN", "MON", "TUR", "WED", "THU", "FRI", "SAT");            let{start,end,startDay,endDay,stayDay} = payload;            let data = new Date();            let startTime = start?start : data.getMonth()+2+'.'+data.getDate();            let endTime = end?end:data.getMonth()+'.'+data.getDate()+2;            startDay = startDay===undefined?data.getDay():startDay;            endDay = endDay===undefined?data.getDay()+2:endDay;            stayDay = startDay?stayDay:2;            state.indexSearch.startTime = startTime;            state.indexSearch.endTime = endTime;            state.indexSearch.startDay = weeks[startDay];            state.indexSearch.endDay = weeks[endDay];            state.indexSearch.stayDay = stayDay;        },        setProvince(state,payload){            state.indexSearch.province = payload;        },        setCollection(state,payload){            state.conllection = payload;        },        setToken(state,payload){            state.token = payload;        },        resetcollection(state,payload){            state;            payload;            var index =  state.conllection.indexOf(payload);            state.conllection.splice(index,1);            var str =  state.conllection.join(',');            let params = Object.assign({},{'hid':payload,'collection':str});            apiSetCollection(params).then(res=>{                console.log(res);            }).catch(error=>{                console.log(error);            })        },        insertcllection(state,payload){            state;            console.log(payload);            state.conllection.push(payload);            var str = state.conllection.join(',');            let params  = {'collection':str};            apiSetCollection(params).then(res=>{                console.log(res);            }).catch(error=>{                console.log(error);            })        }    },    actions:{//异步提交mutations        //登录在actions发请求        //发送登录异步接口        handleLoginin(context,payload){            let redirect = payload.redirect;            //去payload对象的redirect属性            delete payload.redirect;            apiLogin(payload).then(res=>{                context.commit('setToken',res.token);                if (res.code===SUCCESS){                    //不要历史记录 this不指向$router                    apiPerson().then(res=>{                        if (res.code === SUCCESS){                            let collect = res.data.collection.split(/,|，/);                            context.commit('setCollection',collect);                        }                    }).catch(error=>{                        console.log(error);                    })                    router.replace({name:redirect});                }else{                    Toast(res.msg);                }            }).catch(error=>{                error;            })        }    },    modules:{    },    plugins:[createPersistedstate()]})//是个模块 暴露出去export default store;//vuex 使用场景 同一个数据在不同页面有不同的操作//vuex 干什么的 状态管理.集中式的数据存储仓库//vuex 核心概念//state   ==>类似于组件里的data//getters  ==>computed//mutations ==>修改statu的唯一方法(同步)  执行 this.$store.commit('setTime',{start,end,startDay,endDay,stayDay}) 只能写同步操作//actions    ==>写一些异步方法,提交mutations//modules     ==>让仓库划分多一点模块//怎么使用//持久化存储//mapstate  映射state